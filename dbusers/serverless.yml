service:
  name: ${opt:client,''devops''}-dbusers

provider:

   deploymentBucket:
      name: 492239587024-serverless-deployment

   name: aws
   runtime: python3.7
   stage: '${opt:stage,''dev''}'
   timeout: 30
   region: ${opt:region,''us-east-1''}
   stackName: ${opt:client}-dbusers-Lambda-${self:provider.stage}

functions:
   devopssenddbuserstosqs:
      handler: devops_send_dbusers_to_sqs.lambda_handler
      role: devopsdbuserslambdarole
      memorySize: 512
      

   devopscreatedbusers:
      handler: devops_create_dbusers.lambda_handler
      role: devopsdbuserslambdarole
      memorySize: 256
      vpc:
         securityGroupIds:
            - sg-01e00371ebda8d430
         subnetIds:
            - subnet-0a285cea25c5576a7
            - subnet-0881bfbac3d908d2a
            - subnet-05aa6e1e0d8054668
      events:
         - sqs:
               arn: arn:aws:sqs:us-east-1:492239587024:devopsgetdbusersprd
               batchSize: 10

resources:
   Resources:
      devopsgetdbusersqueue:
         Type: AWS::SQS::Queue
         Properties: 
           QueueName: "devopsgetdbusersprd"
      
      #devopsgetdbuserspolicy:
         #Type: AWS::SQS::QueuePolicy
         #Properties: 
           #PolicyDocument:
            #Version: '2012-10-17'
            #Statement:
               #-
                  #Effect: Allow
                  #Action:
                     #- 'sqs:SendMessage'
                  #Resource: '*'
           #Queues: 
             #- !Ref devopsgetdbusersqueue
         #DependsOn: devopsgetdbusersqueue

      devopsdbuserslambdarole:
         Type: 'AWS::IAM::Role'
         Properties:
            Path: /
            RoleName: 'LambdaRole-${self:provider.stackName}-${self:provider.stage}'
            AssumeRolePolicyDocument:
               Version: '2012-10-17'
               Statement:
                  -
                     Effect: Allow
                     Principal:
                        Service:
                           - lambda.amazonaws.com
                     Action: 'sts:AssumeRole'
            Policies:
               -
                  PolicyName: 'LambdaPolicy-${self:provider.stackName}-${self:provider.stage}'
                  PolicyDocument:
                     Version: '2012-10-17'
                     Statement:
                        -
                           Effect: Allow
                           Action:
                              - 'iam:ListRoleTags'
                              - 'iam:ListUserPolicies'
                              - 'iam:ListUsers'
                              - 'iam:GetUser'
                              - 'ec2:CreateNetworkInterface'
                              - 'ec2:DescribeNetworkInterfaces'
                              - 'ec2:DeleteNetworkInterface'
                              - 'ec2:DescribeSubnets'
                              - 'ec2:DescribeVpcs'
                              - 'ec2:DescribeSecurityGroups'
                              - 'ec2:DescribeNetworkInterfaces'
                              - 'secretsmanager:ListSecrets'
                              - 'sqs:ReceiveMessage'
                              - 'sqs:DeleteMessage'
                              - 'sqs:GetQueueAttributes'

                           Resource: '*'
                        -
                           Effect: Allow
                           Action:
                              - 'secretsmanager:GetSecretValue'
                              - 'secretsmanager:GetResourcePolicy'
                              - 'secretsmanager:DescribeSecret'
                              - 'secretsmanager:ListSecretVersionIds'
                           Resource:
                              - 'arn:aws:secretsmanager:*:*:secret:/dbcreds/*'
                              - 'arn:aws:secretsmanager:us-east-1:492239587024:secret:/devops/user_automation_admin*'
                        -
                           Effect: Allow
                           Action:
                              - 'logs:CreateLogGroup'
                              - 'logs:CreateLogStream'
                              - 'logs:PutLogEvents'
                           Resource:
                              -
                                 'Fn::Join':
                                    - ':'
                                    -
                                       - 'arn:aws:logs'
                                       -
                                          Ref: 'AWS::Region'
                                       -
                                          Ref: 'AWS::AccountId'
                                       - 'log-group:/aws/lambda/*:*:*'